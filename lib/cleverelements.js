// Generated by CoffeeScript 1.6.2
var CleverElements, soap;

soap = require('soap-js');

module.exports = CleverElements = (function() {
  CleverElements.prototype.namespace = 'sendcockpit';

  CleverElements.prototype.name = 'validate';

  function CleverElements(userid, apikey, mode, version, wsdl) {
    this.userid = userid;
    this.apikey = apikey;
    this.mode = mode != null ? mode : 'test';
    this.version = version != null ? version : '1.0';
    this.wsdl = wsdl != null ? wsdl : 'http://api.sendcockpit.com/server.php?wsdl';
  }

  CleverElements.prototype.getLists = function(callback) {
    var client, header;

    header = this._createHeader();
    return client = soap.createClient(this.wsdl, function(error, client) {
      if (error) {
        callback(error, []);
      }
      client.addSoapHeader(header);
      return client.apiGetList('<apiGetList />', function(error, result) {
        return callback(error, result.Result.listResponse.item);
      });
    });
  };

  CleverElements.prototype.addSubscriber = function(listId, address, callback) {
    var subscriberList;

    subscriberList = this._createSubscriberList(listId, address);
    return this._getSoapClient(function(error, client) {
      return client.apiAddSubscriber(subscriberList, function(error, response) {
        var success;

        if (error) {
          success = false;
        } else {
          success = true;
        }
        return callback(error, success);
      });
    });
  };

  CleverElements.prototype.addSubscriberDoi = function(listId, address, callback) {
    var subscriberList;

    subscriberList = this._createSubscriberList(listId, address);
    return this._getSoapClient(function(error, client) {
      return client.apiAddSubscriberDoi(subscriberList, function(error, response) {
        var success;

        if (error) {
          success = false;
        } else {
          success = true;
        }
        return callback(error, success);
      });
    });
  };

  CleverElements.prototype._getSoapClient = function(callback) {
    var header;

    header = this._createHeader();
    return soap.createClient(this.wsdl, function(error, client) {
      if (error) {
        callback(error, null);
      }
      client.addSoapHeader(header);
      return callback(null, client);
    });
  };

  CleverElements.prototype._createSubscriberList = function(listId, subscribers) {
    var subscriberList,
      _this = this;

    subscriberList = {
      ctSubscriberRequest: {
        subscriberList: []
      }
    };
    if (Array.isArray(subscribers)) {
      if (subscribers.length > 50) {
        throw new Error('only 50 addresses allowed in one batch');
      }
      subscribers.forEach(function(address) {
        return subscriberList.ctSubscriberRequest.subscriberList.push(_this._createSubscriber(listId, address));
      });
    } else {
      subscriberList.ctSubscriberRequest.subscriberList.push(this._createSubscriber(listId, subscribers));
    }
    return subscriberList;
  };

  CleverElements.prototype._createSubscriber = function(listId, address) {
    var subscriber;

    return subscriber = {
      listID: listId,
      email: address,
      customFields: []
    };
  };

  CleverElements.prototype._createHeader = function() {
    if (this.userid === null) {
      throw new Error('UserID is missing');
    }
    if (this.apikey === null) {
      throw new Error('ApiKey is missing');
    }
    if (this.mode !== 'live' && this.mode !== 'test') {
      throw new Error('Mode needs to be either live or test');
    }
    return "<" + this.namespace + ":" + this.name + "><userid>" + this.userid + "</userid><apikey>" + this.apikey + "</apikey><version>" + this.version + "</version><mode>" + this.mode + "</mode></" + this.namespace + ":" + this.name + ">";
  };

  return CleverElements;

})();
